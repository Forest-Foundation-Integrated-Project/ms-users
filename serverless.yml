service: ms-${self:custom.serviceName}
frameworkVersion: '3'
useDotenv: true

provider:
  name: aws
  runtime: nodejs16.x
  region: 'us-east-1'
  memorySize: 512
  apiGateway:
    restApiId: 411z282v69
    restApiRootResourceId: 4efcqfttn0
  environment:
    DB_HOST: ${env:DB_HOST, ssm:/ifsp/infra/EC2-PS/host}
    DB_PORT: ${env:DB_PORT, ssm:/ifsp/infra/EC2-PS/port}
    DB_NAME: ${env:DB_NAME, ssm:/ifsp/infra/EC2-PS/dbname}
    DB_USER: ${env:DB_USER, ssm:/ifsp/infra/EC2-PS/username}
    DB_PASSWORD: ${env:DB_PASSWORD, ssm:/ifsp/infra/EC2-PS/password}

custom:
  esbuild:
    external:
      - pg-native
  serviceName: users
  contextPath: ${self:custom.serviceName}
  baseApi: ${self:custom.contextPath}
  funcDir: src/4-framework/functions
  ms-account-digital-authorizer:
    type: TOKEN
    authorizerId: 4efcqfttn0
functions:
  createUser:
    handler: ${self:custom.funcDir}/createUser.handler
    events:
      - http:
          path: ${self:custom.baseApi}/
          method: post
          cors:
            origin: '*'
            headers: '*'
  viewUser:
    handler: ${self:custom.funcDir}/viewUser.handler
    events:
      - http:
          path: ${self:custom.baseApi}/{user_id}
          method: get
          authorizer: ${self:custom.ms-account-digital-authorizer}
          cors:
            origin: '*'
            headers: '*'
  removeUser:
    handler: ${self:custom.funcDir}/removeUser.handler
    events:
      - http:
          path: ${self:custom.baseApi}/{user_id}
          method: delete
          cors:
            origin: '*'
            headers: '*'
  updateUser:
    handler: ${self:custom.funcDir}/updateUser.handler
    events:
      - http:
          path: ${self:custom.baseApi}/{user_id}
          method: put
          cors:
            origin: '*'
            headers: '*'

plugins:
  - serverless-esbuild
  - serverless-offline
  - serverless-dotenv-plugin
